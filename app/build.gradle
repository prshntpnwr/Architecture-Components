apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'jacoco'

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.example.prashantpanwar.todos"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        dataBinding { enabled = true }

        //for handling http client not fount error from Roboletrics
        useLibrary 'org.apache.http.legacy'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        androidExtensions { experimental = true }

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }

    // Configure only for each module that uses Java 8
    // language features (either in its source code or
    // through dependencies).
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support.design
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8
    kapt deps.lifecycle.compiler
    annotationProcessor deps.lifecycle.compiler
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.gson
    implementation deps.glide
    implementation deps.kotlin.stdlib
    implementation deps.constraint_layout
    androidTestImplementation deps.support.app_compat
    androidTestImplementation deps.support.recyclerview
    androidTestImplementation deps.support.cardview
    androidTestImplementation deps.support.design
    androidTestImplementation deps.support.annotations
    implementation deps.support.core_ktx
    implementation deps.support.fragment_runtime_ktx

    // navigation
    implementation deps.navigation.runtime
    implementation deps.navigation.runtime_ktx
    implementation deps.navigation.fragment
    implementation deps.navigation.ui
    implementation deps.navigation.ui_ktx
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.safe_args_plugin
//    androidTestImplementation deps.navigation.testing_ktx

    // pagination
    implementation deps.paging_ktx

    // dependency injection
    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    kapt deps.dagger.android_support_compiler
    kapt deps.dagger.compiler

    // room database
    kapt deps.room.compiler
    implementation deps.room.runtime
    androidTestImplementation deps.room.testing
    kapt(deps.room.compiler, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Android Testing Support Library's runner and rules
    androidTestImplementation deps.atsl.core
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules
    androidTestImplementation deps.arch_core.testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation(deps.espresso.core, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })

    androidTestImplementation(deps.espresso.contrib, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })

    androidTestImplementation deps.espresso.intents

    androidTestImplementation deps.arch_core.runtime
    androidTestImplementation deps.arch_core.testing
    testImplementation deps.mockito.core
    androidTestImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }
    testImplementation deps.roboelectric
    androidTestImplementation deps.roboelectric
    androidTestImplementation deps.support.annotations
    androidTestImplementation deps.dexmaker

    task fullCoverageReport(type: JacocoReport) {
        dependsOn 'createDebugCoverageReport'
        dependsOn 'testDebugUnitTest'
        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                          '**/*Test*.*', 'android/**/*.*',
                          '**/*_MembersInjector.class',
                          '**/Dagger*Component.class',
                          '**/Dagger*Component$Builder.class',
                          '**/*_*Factory.class',
                          '**/*ComponentImpl.class',
                          '**/*SubComponentBuilder.class']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories = files([mainSrc])
        classDirectories = files([debugTree])
        executionData = fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/connected/*coverage.ec"
        ])
    }
}